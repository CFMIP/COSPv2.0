# (c) British Crown Copyright 2020, the Met Office.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#   * Neither the name of the Met Office nor the names of its contributors may
#     be used to endorse or promote products derived from this softwarewithout
#     specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.

# Workflow for continuous integration tests
name: CI
on: [push]

jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        fortran-compiler: [gfortran, gfortran-8, gfortran-9, ifort]
    env:
      F90: ${{ matrix.fortran-compiler }}
      F90FLAGS: "-O3 -ffree-line-length-none -fcheck=bounds -finit-real=nan"
      ATOL: 0.0
      RTOL: 0.0
    # Sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out repository under $GITHUB_WORKSPACE
    - uses: actions/checkout@v2
    # Set up Python and install dependencies
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - name: Install python dependencies
      run: conda install cartopy matplotlib netcdf4
    # Update packages URLs. This avoids 404 errors when installing
    # packages, which appear when the Ubuntu version becomes
    # unsupported 
    #- name: Update packages URLs
    #  run: |
    #    sudo sed -i -e 's/archive.ubuntu.com\|security.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list
    #    sudo apt-get update
    # Install FORTRAN compiler
    - name: Install gfortran compiler and NetCDF
      if: ${{ matrix.fortran-compiler != 'ifort' }}
      run: sudo apt-get install ${{ matrix.fortran-compiler }}
    # Intel compilers and libraries if needed
    #   https://software.intel.com/content/www/us/en/develop/articles/oneapi-repo-instructions.html#aptpkg
    - name: Install Intel compilers and libraries
      if: ${{ matrix.fortran-compiler == 'ifort' }}
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
        sudo apt-get update
        sudo apt-get install intel-oneapi-common-licensing
        sudo apt-get install intel-oneapi-common-vars
        sudo apt-get install intel-oneapi-dev-utilities
        sudo apt-get install intel-oneapi-ifort
    # Install NetCDF library
    - name: Install NetCDF library
      run: sudo apt-get install libnetcdf-dev
    # NetCDF FORTRAN library
    - name: Install NetCDF FORTRAN library for standard gfortran
      if: ${{ matrix.fortran-compiler == 'gfortran' }}
      run: sudo apt-get install libnetcdff-dev
    - name: Build NetCDF FORTRAN library
      if: ${{ matrix.fortran-compiler != 'gfortran' }}
      run: |
        source /opt/intel/inteloneapi/setvars.sh || true
        git clone https://github.com/Unidata/netcdf-fortran.git --branch v4.4.4
        cd netcdf-fortran
        ./configure --prefix=/usr
        make
        sudo make install
    # Build COSP2 driver
    - name: Build driver
      run: |
        if [[ -e /opt/intel/inteloneapi/setvars.sh ]]; then
          source /opt/intel/inteloneapi/setvars.sh;
          ifort --version
          export F90FLAGS="-O3"
        fi
        cd build
        make driver
    # Retrieve and expand large data files
    - name: Retrieve data files
      run: |
        GDFILE='https://docs.google.com/uc?export=download&id=17eK4_DVEvFOE9Uf6siXJDpWZJKT1aqkU'
        OUTPATH=driver/data/inputs/UKMO/cosp_input.um_global.nc.gz
        wget --no-check-certificate $GDFILE -O $OUTPATH
        gunzip ${OUTPATH}
        cd driver/data/inputs/UKMO
        md5sum -c cosp_input.um_global.nc.md5
        cd ${GITHUB_WORKSPACE}
        GDFILE='https://docs.google.com/uc?export=download&id=10fjcxnmHpt8Go6ipHWUEnN_Siwdtdaqb'
        OUTPATH=driver/data/outputs/UKMO/cosp2_output.um_global.gfortran.kgo.nc.gz
        wget --no-check-certificate $GDFILE -O $OUTPATH
        gunzip ${OUTPATH}
        cd driver/data/outputs/UKMO
        md5sum -c cosp2_output.um_global.gfortran.kgo.nc.md5
    # Run COSP2 tests. We could run both tests in one step, but 
    # doing it this way the output is easier to interpret.
    # 1. Basic test
    - name: Basic test
      run: |
        source /opt/intel/inteloneapi/setvars.sh || true
        cd driver/run
        ./cosp2_test cosp2_input_nl.txt
    # 2. UM global snapshot
    - name: UM global snapshot
      run: |
        source /opt/intel/inteloneapi/setvars.sh || true
        cd driver/run
        ./cosp2_test cosp2_input_nl.um_global.txt
    # Compare results against known good outputs. As above,
    # we split it in as many steps as tests.
    # 1. Basic test
    - name: Basic against known good output (KGO)
      run: |
        source '/usr/share/miniconda/etc/profile.d/conda.sh' 
        conda activate
        if [[ -e /opt/intel/inteloneapi/setvars.sh ]]; then
          ATOL=1.0e-20
          RTOL=0.0006
        fi
        cd driver
        KGO=data/outputs/UKMO/cosp2_output_um.gfortran.kgo.nc
        TST=data/outputs/UKMO/cosp2_output_um.nc
        python compare_to_kgo.py ${KGO} ${TST} --atol=${ATOL} --rtol=${RTOL}
    # 2. UM global snapshot. The approach used for the basic test would needed
    # large tolerances for the ifort compiler. We keep tolerances small for ifort,
    # and then we test against the output table.
    - name: UM global against known good output (KGO)
      run: |
        source '/usr/share/miniconda/etc/profile.d/conda.sh' 
        conda activate
        cd driver
        KGO=data/outputs/UKMO/cosp2_output.um_global.gfortran.kgo.nc
        TST=data/outputs/UKMO/cosp2_output.um_global.nc
        OUT=data/outputs/UKMO/cosp2_output.um_global.out
        if [[ -e /opt/intel/inteloneapi/setvars.sh ]]; then
          ATOL=1.0e-10
          RTOL=0.001
          python compare_to_kgo.py ${KGO} ${TST} --atol=${ATOL} --rtol=${RTOL} > ${OUT}
        else
          python compare_to_kgo.py ${KGO} ${TST} --atol=${ATOL} --rtol=${RTOL}
        fi
    # Produce plots when it fails during global snapshot test,
    # and create a tarball with outputs. No need to compress the tarball,
    # the artifact is compressed by github.
    - name: Produce plots and create tarball
      if: failure()
      run: |
        source '/usr/share/miniconda/etc/profile.d/conda.sh' 
        conda activate
        cd driver
        if [[ -e data/outputs/UKMO/cosp2_output.um_global.nc ]]; then
          python plot_test_outputs.py
        fi
        cd data/outputs/UKMO
        tar --ignore-failed-read -cf outputs.UKMO.tar cosp2_output.um_global.nc cosp2_output_um.nc *.png
        ls -lh
    # Make output files available any test fails
    - name: Upload output file if test fails
      if: failure()
      uses: actions/upload-artifact@v1.0.0
      with:
        name: outputs.UKMO.tar
        path: driver/data/outputs/UKMO/outputs.UKMO.tar
